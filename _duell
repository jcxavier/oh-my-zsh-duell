#compdef duell
#autoload

local -a _1st_arguments
_1st_arguments=(
    'create:Used for creating a default project in the current folder.'
    'build:Builds the specified platform. Needs to be run in a folder with a duell_project.xml.'
    'update:Checks all the dependencies of the current project in the current directory and updates them.'
    'setup:Sets up the environment that needs to be run once for a specified platform.'
    'self_setup:Basic setup for the duell tool. Run me first!'
    'repo_list:Shows the repository list. You can add and remove urls from it.'
)

local -a _inherited_options
_inherited_options=(
    '(-verbose)-verbose[Every possible logging information will be shown.]' \
    '(-mute)-mute[No output will be printed at all.]' \
    '(-no-color)-no-color[Color markup will be stripped out of the output.]' \
    '(-yestoall)-yestoall[Answers "y" to all questions and default to all questions.]' \
    '(-help)-help[Show help banner of specified command.]'
)

local -a _build_options
_build_options=(
    '(-fast)-fast[Use this command if you are just iterating haxe code.]' \
    '(-publish)-publish[Outputs a releasable package into the configured "Publish" folder.]' \
    '(-norun)-norun[The application won'\''t run, just runs the prebuild and build steps.]' \
    '(-test)-test[Launches a server listening to a configured port and then runs the application.]' \
    '(-clean)-clean[Clean up the Export folder and the native extensions. Nothing else is done except cleaning up.]' \
    '(-noprebuild)-noprebuild[Does not parse the configuration, meaning the changes to the .xml files are not processed.]' \
    '(-nobuild)-nobuild[Does not build. Haxe code does not get recompiled, and target platform app packages are not remade.]'
)

local -a _update_options
_update_options=(
    '(-overridebranch)-overridebranch[If existent, sets the versions of each library to the specified branch.]'
)

local -a _setup_options
_setup_options=(
    '(-v)-v[Specifies the required setup version.]'
)

local -a _repo_list_options
_repo_list_options=(
    '(-add)-add[Adds a new url to the end of the repository list.]' \
    '(-removeAll)-removeAll[ARemoves all urls from the repository list. Resets to the default url.]' \
    '(-addFront)-addFront[Adds a new url to front of the repository list.]' \
    '(-reverse)-reverse[Reverses the order of all urls in the repository list.]' \
    '(-remove)-remove[Removes a url from the repository list.]'
)

__first_command_list ()
{
    local expl
    declare -a tasks

    tasks=(create build update setup self_setup repo_list)

    _wanted tasks expl 'help' compadd $tasks
}

__duell-create() {
}

__duell-build() {
}

__duell-setup() {
}

__duell-repo_list() {
}

local curcontext="$curcontext" state line
typeset -A opt_args

_arguments -C \
    $_inherited_options \
    ':command:->command' \
    '*::options:->options'

case $state in
  (command)
      _describe -t commands "duell" _1st_arguments
      return
  ;;

  (options)
    case $line[1] in
        (create)
            __duell-create
            _arguments \
                $_inherited_options
        ;;

        (build)
            __duell-build
            _arguments \
                $_inherited_options \
                $_build_options
        ;;

        (update)
            _arguments \
                $_inherited_options \
                $_update_options
        ;;

        (setup)
            __duell-setup
            _arguments \
                $_inherited_options \
                $_setup_options
        ;;

        (self_setup)
            _arguments \
                $_inherited_options
        ;;

        (repo_list)
            __duell-repo_list
            _arguments \
                $_inherited_options \
                $_repo_list_options
        ;;
    esac
  ;;
esac
